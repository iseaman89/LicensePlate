@page "/users/login"
@using MudExtensions.Enums
@inject IAuthenticationService _authService
@inject NavigationManager _navManager


@if (!string.IsNullOrEmpty(_message))
{
<div class="alert alert-danger">
    <p>@_message</p>
</div>
}
<Animate Animation="new SlideUpAnimation()" DelayMilliseconds="1000" DurationMilliseconds="3000">
    <MudContainer Class="margin-top: 10px">
        <MudImage
            ObjectPosition="ObjectPosition.Center"
            Height="150"
            Width="300"
            Src="img/spie-logo.jpg"
            Class="rounded-lg"
            Style="display: block; margin: auto;"
        />
    </MudContainer>
</Animate>
<Animate Animation="new ZoomInAnimation()" DelayMilliseconds="1200" DurationMilliseconds="3000">
    <div style="display: flex; justify-content: center; align-items: center">
        <MudPaper Style="width: 300px;">
            <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <MudTextField Class="form-control" T="string" Label="Username" @bind-Value="_loginModel.UserName" FullWidth="true"/>
                    <ValidationMessage For="@(() => _loginModel.UserName)"></ValidationMessage>
                </div>
                <div style="height: 16px;"></div>
                <div class="form-group">
                    <MudTextField Class="form-control" T="string" Label="Password" @bind-Value="_loginModel.Password" InputType="InputType.Password" FullWidth="true"/>
                    <ValidationMessage For="@(() => _loginModel.Password)"></ValidationMessage>
                </div>
                <div style="height: 16px;"></div>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">Login</MudButton>
            </EditForm>
        </MudPaper>
    </div>
</Animate>


@code {
private LoginUserDto _loginModel = new LoginUserDto();
private string _message = String.Empty;

private async Task HandleLogin()
{
    try
    {
        var response = await _authService.AuthenticateAsync(_loginModel);
        if (response)
        {
            _navManager.NavigateTo("/");
        }
    }
    catch (ApiException ex)
    {
        if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
        {
            _navManager.NavigateTo("/");
        }
         _message = ex.Response;
   }
}
}
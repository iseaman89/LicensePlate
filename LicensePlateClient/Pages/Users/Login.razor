@page "/users/login"
@using System.Diagnostics
@using MudExtensions.Enums
@inject IAuthenticationService _authService
@inject NavigationManager _navManager


<Animate Animation="new SlideUpAnimation()" DelayMilliseconds="1000" DurationMilliseconds="3000">
    <MudContainer Class="margin-top: 10px">
        <MudImage
            ObjectPosition="ObjectPosition.Center"
            Height="150"
            Width="300"
            Src="img/spie-logo.jpg"
            Class="rounded-lg"
            Style="display: block; margin: auto; margin-top: 20px;"
        />
    </MudContainer>
</Animate>
<Animate Animation="new ZoomInAnimation()" DelayMilliseconds="1200" DurationMilliseconds="3000">
    <div class="login-container">
        <MudPaper Style="width: 300px; padding: 20px;" Elevation="4">
            <EditForm Model="_loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <MudTextField T="string" Label="Username" @bind-Value="_loginModel.UserName" Required="true" FullWidth="true" Margin="Margin.Dense" Variant="Variant.Filled"/>
                <ValidationMessage For="@(() => _loginModel.UserName)"/>
                <MudTextField T="string" Label="Password" @bind-Value="_loginModel.Password" InputType="InputType.Password" Required="true" FullWidth="true" Margin="Margin.Dense" Variant="Variant.Filled"/>
                <ValidationMessage For="@(() => _loginModel.Password)"/>
                @if (!string.IsNullOrEmpty(_message))
                {
                    <MudAlert Severity="Severity.Error" Elevation="2">@_message</MudAlert>
                }
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="mt-3" FullWidth="true">Login</MudButton>
            </EditForm>
        </MudPaper>
    </div>
</Animate>

@code {
private LoginUserDto _loginModel = new LoginUserDto();
private string _message = String.Empty;

private async Task HandleLogin()
{
try
{
var response = await _authService.AuthenticateAsync(_loginModel);
if (response)
{
_navManager.NavigateTo("/");
}
}
catch (ApiException ex)
{
    
if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
{
_navManager.NavigateTo("/");
}
_message = Messages.LoginError;
}
}
}
